{"format": "torch", "nodes": [{"name": "module", "id": 140507360638416, "class_name": "DenseNet121(\n  (densenet121): DenseNet(\n    (features): Sequential(\n      (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu0): ReLU(inplace=True)\n      (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (denseblock1): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (transition1): _Transition(\n        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock2): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (transition2): _Transition(\n        (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock3): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer13): _DenseLayer(\n          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer14): _DenseLayer(\n          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer15): _DenseLayer(\n          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer16): _DenseLayer(\n          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer17): _DenseLayer(\n          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer18): _DenseLayer(\n          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer19): _DenseLayer(\n          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer20): _DenseLayer(\n          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer21): _DenseLayer(\n          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer22): _DenseLayer(\n          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer23): _DenseLayer(\n          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer24): _DenseLayer(\n          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (transition3): _Transition(\n        (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock4): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer13): _DenseLayer(\n          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer14): _DenseLayer(\n          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer15): _DenseLayer(\n          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer16): _DenseLayer(\n          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (classifier): Sequential(\n      (0): Linear(in_features=1024, out_features=7, bias=True)\n    )\n  )\n  (drop_layer): Dropout(p=0.2, inplace=False)\n)", "parameters": [["densenet121.features.conv0.weight", [64, 3, 7, 7]], ["densenet121.features.norm0.weight", [64]], ["densenet121.features.norm0.bias", [64]], ["densenet121.features.denseblock1.denselayer1.norm1.weight", [64]], ["densenet121.features.denseblock1.denselayer1.norm1.bias", [64]], ["densenet121.features.denseblock1.denselayer1.conv1.weight", [128, 64, 1, 1]], ["densenet121.features.denseblock1.denselayer1.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer1.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer1.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock1.denselayer2.norm1.weight", [96]], ["densenet121.features.denseblock1.denselayer2.norm1.bias", [96]], ["densenet121.features.denseblock1.denselayer2.conv1.weight", [128, 96, 1, 1]], ["densenet121.features.denseblock1.denselayer2.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer2.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer2.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock1.denselayer3.norm1.weight", [128]], ["densenet121.features.denseblock1.denselayer3.norm1.bias", [128]], ["densenet121.features.denseblock1.denselayer3.conv1.weight", [128, 128, 1, 1]], ["densenet121.features.denseblock1.denselayer3.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer3.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer3.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock1.denselayer4.norm1.weight", [160]], ["densenet121.features.denseblock1.denselayer4.norm1.bias", [160]], ["densenet121.features.denseblock1.denselayer4.conv1.weight", [128, 160, 1, 1]], ["densenet121.features.denseblock1.denselayer4.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer4.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer4.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock1.denselayer5.norm1.weight", [192]], ["densenet121.features.denseblock1.denselayer5.norm1.bias", [192]], ["densenet121.features.denseblock1.denselayer5.conv1.weight", [128, 192, 1, 1]], ["densenet121.features.denseblock1.denselayer5.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer5.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer5.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock1.denselayer6.norm1.weight", [224]], ["densenet121.features.denseblock1.denselayer6.norm1.bias", [224]], ["densenet121.features.denseblock1.denselayer6.conv1.weight", [128, 224, 1, 1]], ["densenet121.features.denseblock1.denselayer6.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer6.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer6.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.transition1.norm.weight", [256]], ["densenet121.features.transition1.norm.bias", [256]], ["densenet121.features.transition1.conv.weight", [128, 256, 1, 1]], ["densenet121.features.denseblock2.denselayer1.norm1.weight", [128]], ["densenet121.features.denseblock2.denselayer1.norm1.bias", [128]], ["densenet121.features.denseblock2.denselayer1.conv1.weight", [128, 128, 1, 1]], ["densenet121.features.denseblock2.denselayer1.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer1.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer1.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer2.norm1.weight", [160]], ["densenet121.features.denseblock2.denselayer2.norm1.bias", [160]], ["densenet121.features.denseblock2.denselayer2.conv1.weight", [128, 160, 1, 1]], ["densenet121.features.denseblock2.denselayer2.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer2.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer2.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer3.norm1.weight", [192]], ["densenet121.features.denseblock2.denselayer3.norm1.bias", [192]], ["densenet121.features.denseblock2.denselayer3.conv1.weight", [128, 192, 1, 1]], ["densenet121.features.denseblock2.denselayer3.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer3.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer3.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer4.norm1.weight", [224]], ["densenet121.features.denseblock2.denselayer4.norm1.bias", [224]], ["densenet121.features.denseblock2.denselayer4.conv1.weight", [128, 224, 1, 1]], ["densenet121.features.denseblock2.denselayer4.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer4.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer4.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer5.norm1.weight", [256]], ["densenet121.features.denseblock2.denselayer5.norm1.bias", [256]], ["densenet121.features.denseblock2.denselayer5.conv1.weight", [128, 256, 1, 1]], ["densenet121.features.denseblock2.denselayer5.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer5.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer5.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer6.norm1.weight", [288]], ["densenet121.features.denseblock2.denselayer6.norm1.bias", [288]], ["densenet121.features.denseblock2.denselayer6.conv1.weight", [128, 288, 1, 1]], ["densenet121.features.denseblock2.denselayer6.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer6.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer6.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer7.norm1.weight", [320]], ["densenet121.features.denseblock2.denselayer7.norm1.bias", [320]], ["densenet121.features.denseblock2.denselayer7.conv1.weight", [128, 320, 1, 1]], ["densenet121.features.denseblock2.denselayer7.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer7.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer7.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer8.norm1.weight", [352]], ["densenet121.features.denseblock2.denselayer8.norm1.bias", [352]], ["densenet121.features.denseblock2.denselayer8.conv1.weight", [128, 352, 1, 1]], ["densenet121.features.denseblock2.denselayer8.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer8.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer8.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer9.norm1.weight", [384]], ["densenet121.features.denseblock2.denselayer9.norm1.bias", [384]], ["densenet121.features.denseblock2.denselayer9.conv1.weight", [128, 384, 1, 1]], ["densenet121.features.denseblock2.denselayer9.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer9.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer9.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer10.norm1.weight", [416]], ["densenet121.features.denseblock2.denselayer10.norm1.bias", [416]], ["densenet121.features.denseblock2.denselayer10.conv1.weight", [128, 416, 1, 1]], ["densenet121.features.denseblock2.denselayer10.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer10.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer10.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer11.norm1.weight", [448]], ["densenet121.features.denseblock2.denselayer11.norm1.bias", [448]], ["densenet121.features.denseblock2.denselayer11.conv1.weight", [128, 448, 1, 1]], ["densenet121.features.denseblock2.denselayer11.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer11.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer11.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer12.norm1.weight", [480]], ["densenet121.features.denseblock2.denselayer12.norm1.bias", [480]], ["densenet121.features.denseblock2.denselayer12.conv1.weight", [128, 480, 1, 1]], ["densenet121.features.denseblock2.denselayer12.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer12.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer12.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.transition2.norm.weight", [512]], ["densenet121.features.transition2.norm.bias", [512]], ["densenet121.features.transition2.conv.weight", [256, 512, 1, 1]], ["densenet121.features.denseblock3.denselayer1.norm1.weight", [256]], ["densenet121.features.denseblock3.denselayer1.norm1.bias", [256]], ["densenet121.features.denseblock3.denselayer1.conv1.weight", [128, 256, 1, 1]], ["densenet121.features.denseblock3.denselayer1.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer1.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer1.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer2.norm1.weight", [288]], ["densenet121.features.denseblock3.denselayer2.norm1.bias", [288]], ["densenet121.features.denseblock3.denselayer2.conv1.weight", [128, 288, 1, 1]], ["densenet121.features.denseblock3.denselayer2.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer2.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer2.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer3.norm1.weight", [320]], ["densenet121.features.denseblock3.denselayer3.norm1.bias", [320]], ["densenet121.features.denseblock3.denselayer3.conv1.weight", [128, 320, 1, 1]], ["densenet121.features.denseblock3.denselayer3.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer3.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer3.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer4.norm1.weight", [352]], ["densenet121.features.denseblock3.denselayer4.norm1.bias", [352]], ["densenet121.features.denseblock3.denselayer4.conv1.weight", [128, 352, 1, 1]], ["densenet121.features.denseblock3.denselayer4.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer4.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer4.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer5.norm1.weight", [384]], ["densenet121.features.denseblock3.denselayer5.norm1.bias", [384]], ["densenet121.features.denseblock3.denselayer5.conv1.weight", [128, 384, 1, 1]], ["densenet121.features.denseblock3.denselayer5.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer5.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer5.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer6.norm1.weight", [416]], ["densenet121.features.denseblock3.denselayer6.norm1.bias", [416]], ["densenet121.features.denseblock3.denselayer6.conv1.weight", [128, 416, 1, 1]], ["densenet121.features.denseblock3.denselayer6.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer6.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer6.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer7.norm1.weight", [448]], ["densenet121.features.denseblock3.denselayer7.norm1.bias", [448]], ["densenet121.features.denseblock3.denselayer7.conv1.weight", [128, 448, 1, 1]], ["densenet121.features.denseblock3.denselayer7.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer7.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer7.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer8.norm1.weight", [480]], ["densenet121.features.denseblock3.denselayer8.norm1.bias", [480]], ["densenet121.features.denseblock3.denselayer8.conv1.weight", [128, 480, 1, 1]], ["densenet121.features.denseblock3.denselayer8.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer8.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer8.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer9.norm1.weight", [512]], ["densenet121.features.denseblock3.denselayer9.norm1.bias", [512]], ["densenet121.features.denseblock3.denselayer9.conv1.weight", [128, 512, 1, 1]], ["densenet121.features.denseblock3.denselayer9.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer9.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer9.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer10.norm1.weight", [544]], ["densenet121.features.denseblock3.denselayer10.norm1.bias", [544]], ["densenet121.features.denseblock3.denselayer10.conv1.weight", [128, 544, 1, 1]], ["densenet121.features.denseblock3.denselayer10.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer10.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer10.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer11.norm1.weight", [576]], ["densenet121.features.denseblock3.denselayer11.norm1.bias", [576]], ["densenet121.features.denseblock3.denselayer11.conv1.weight", [128, 576, 1, 1]], ["densenet121.features.denseblock3.denselayer11.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer11.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer11.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer12.norm1.weight", [608]], ["densenet121.features.denseblock3.denselayer12.norm1.bias", [608]], ["densenet121.features.denseblock3.denselayer12.conv1.weight", [128, 608, 1, 1]], ["densenet121.features.denseblock3.denselayer12.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer12.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer12.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer13.norm1.weight", [640]], ["densenet121.features.denseblock3.denselayer13.norm1.bias", [640]], ["densenet121.features.denseblock3.denselayer13.conv1.weight", [128, 640, 1, 1]], ["densenet121.features.denseblock3.denselayer13.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer13.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer13.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer14.norm1.weight", [672]], ["densenet121.features.denseblock3.denselayer14.norm1.bias", [672]], ["densenet121.features.denseblock3.denselayer14.conv1.weight", [128, 672, 1, 1]], ["densenet121.features.denseblock3.denselayer14.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer14.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer14.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer15.norm1.weight", [704]], ["densenet121.features.denseblock3.denselayer15.norm1.bias", [704]], ["densenet121.features.denseblock3.denselayer15.conv1.weight", [128, 704, 1, 1]], ["densenet121.features.denseblock3.denselayer15.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer15.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer15.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer16.norm1.weight", [736]], ["densenet121.features.denseblock3.denselayer16.norm1.bias", [736]], ["densenet121.features.denseblock3.denselayer16.conv1.weight", [128, 736, 1, 1]], ["densenet121.features.denseblock3.denselayer16.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer16.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer16.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer17.norm1.weight", [768]], ["densenet121.features.denseblock3.denselayer17.norm1.bias", [768]], ["densenet121.features.denseblock3.denselayer17.conv1.weight", [128, 768, 1, 1]], ["densenet121.features.denseblock3.denselayer17.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer17.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer17.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer18.norm1.weight", [800]], ["densenet121.features.denseblock3.denselayer18.norm1.bias", [800]], ["densenet121.features.denseblock3.denselayer18.conv1.weight", [128, 800, 1, 1]], ["densenet121.features.denseblock3.denselayer18.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer18.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer18.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer19.norm1.weight", [832]], ["densenet121.features.denseblock3.denselayer19.norm1.bias", [832]], ["densenet121.features.denseblock3.denselayer19.conv1.weight", [128, 832, 1, 1]], ["densenet121.features.denseblock3.denselayer19.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer19.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer19.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer20.norm1.weight", [864]], ["densenet121.features.denseblock3.denselayer20.norm1.bias", [864]], ["densenet121.features.denseblock3.denselayer20.conv1.weight", [128, 864, 1, 1]], ["densenet121.features.denseblock3.denselayer20.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer20.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer20.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer21.norm1.weight", [896]], ["densenet121.features.denseblock3.denselayer21.norm1.bias", [896]], ["densenet121.features.denseblock3.denselayer21.conv1.weight", [128, 896, 1, 1]], ["densenet121.features.denseblock3.denselayer21.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer21.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer21.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer22.norm1.weight", [928]], ["densenet121.features.denseblock3.denselayer22.norm1.bias", [928]], ["densenet121.features.denseblock3.denselayer22.conv1.weight", [128, 928, 1, 1]], ["densenet121.features.denseblock3.denselayer22.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer22.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer22.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer23.norm1.weight", [960]], ["densenet121.features.denseblock3.denselayer23.norm1.bias", [960]], ["densenet121.features.denseblock3.denselayer23.conv1.weight", [128, 960, 1, 1]], ["densenet121.features.denseblock3.denselayer23.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer23.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer23.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer24.norm1.weight", [992]], ["densenet121.features.denseblock3.denselayer24.norm1.bias", [992]], ["densenet121.features.denseblock3.denselayer24.conv1.weight", [128, 992, 1, 1]], ["densenet121.features.denseblock3.denselayer24.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer24.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer24.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.transition3.norm.weight", [1024]], ["densenet121.features.transition3.norm.bias", [1024]], ["densenet121.features.transition3.conv.weight", [512, 1024, 1, 1]], ["densenet121.features.denseblock4.denselayer1.norm1.weight", [512]], ["densenet121.features.denseblock4.denselayer1.norm1.bias", [512]], ["densenet121.features.denseblock4.denselayer1.conv1.weight", [128, 512, 1, 1]], ["densenet121.features.denseblock4.denselayer1.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer1.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer1.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer2.norm1.weight", [544]], ["densenet121.features.denseblock4.denselayer2.norm1.bias", [544]], ["densenet121.features.denseblock4.denselayer2.conv1.weight", [128, 544, 1, 1]], ["densenet121.features.denseblock4.denselayer2.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer2.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer2.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer3.norm1.weight", [576]], ["densenet121.features.denseblock4.denselayer3.norm1.bias", [576]], ["densenet121.features.denseblock4.denselayer3.conv1.weight", [128, 576, 1, 1]], ["densenet121.features.denseblock4.denselayer3.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer3.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer3.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer4.norm1.weight", [608]], ["densenet121.features.denseblock4.denselayer4.norm1.bias", [608]], ["densenet121.features.denseblock4.denselayer4.conv1.weight", [128, 608, 1, 1]], ["densenet121.features.denseblock4.denselayer4.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer4.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer4.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer5.norm1.weight", [640]], ["densenet121.features.denseblock4.denselayer5.norm1.bias", [640]], ["densenet121.features.denseblock4.denselayer5.conv1.weight", [128, 640, 1, 1]], ["densenet121.features.denseblock4.denselayer5.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer5.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer5.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer6.norm1.weight", [672]], ["densenet121.features.denseblock4.denselayer6.norm1.bias", [672]], ["densenet121.features.denseblock4.denselayer6.conv1.weight", [128, 672, 1, 1]], ["densenet121.features.denseblock4.denselayer6.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer6.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer6.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer7.norm1.weight", [704]], ["densenet121.features.denseblock4.denselayer7.norm1.bias", [704]], ["densenet121.features.denseblock4.denselayer7.conv1.weight", [128, 704, 1, 1]], ["densenet121.features.denseblock4.denselayer7.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer7.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer7.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer8.norm1.weight", [736]], ["densenet121.features.denseblock4.denselayer8.norm1.bias", [736]], ["densenet121.features.denseblock4.denselayer8.conv1.weight", [128, 736, 1, 1]], ["densenet121.features.denseblock4.denselayer8.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer8.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer8.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer9.norm1.weight", [768]], ["densenet121.features.denseblock4.denselayer9.norm1.bias", [768]], ["densenet121.features.denseblock4.denselayer9.conv1.weight", [128, 768, 1, 1]], ["densenet121.features.denseblock4.denselayer9.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer9.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer9.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer10.norm1.weight", [800]], ["densenet121.features.denseblock4.denselayer10.norm1.bias", [800]], ["densenet121.features.denseblock4.denselayer10.conv1.weight", [128, 800, 1, 1]], ["densenet121.features.denseblock4.denselayer10.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer10.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer10.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer11.norm1.weight", [832]], ["densenet121.features.denseblock4.denselayer11.norm1.bias", [832]], ["densenet121.features.denseblock4.denselayer11.conv1.weight", [128, 832, 1, 1]], ["densenet121.features.denseblock4.denselayer11.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer11.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer11.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer12.norm1.weight", [864]], ["densenet121.features.denseblock4.denselayer12.norm1.bias", [864]], ["densenet121.features.denseblock4.denselayer12.conv1.weight", [128, 864, 1, 1]], ["densenet121.features.denseblock4.denselayer12.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer12.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer12.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer13.norm1.weight", [896]], ["densenet121.features.denseblock4.denselayer13.norm1.bias", [896]], ["densenet121.features.denseblock4.denselayer13.conv1.weight", [128, 896, 1, 1]], ["densenet121.features.denseblock4.denselayer13.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer13.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer13.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer14.norm1.weight", [928]], ["densenet121.features.denseblock4.denselayer14.norm1.bias", [928]], ["densenet121.features.denseblock4.denselayer14.conv1.weight", [128, 928, 1, 1]], ["densenet121.features.denseblock4.denselayer14.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer14.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer14.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer15.norm1.weight", [960]], ["densenet121.features.denseblock4.denselayer15.norm1.bias", [960]], ["densenet121.features.denseblock4.denselayer15.conv1.weight", [128, 960, 1, 1]], ["densenet121.features.denseblock4.denselayer15.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer15.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer15.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer16.norm1.weight", [992]], ["densenet121.features.denseblock4.denselayer16.norm1.bias", [992]], ["densenet121.features.denseblock4.denselayer16.conv1.weight", [128, 992, 1, 1]], ["densenet121.features.denseblock4.denselayer16.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer16.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer16.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.norm5.weight", [1024]], ["densenet121.features.norm5.bias", [1024]], ["densenet121.classifier.0.weight", [7, 1024]], ["densenet121.classifier.0.bias", [7]]], "output_shape": [[16, 1024], [16, 7]], "num_parameters": [9408, 64, 64, 64, 64, 8192, 128, 128, 36864, 96, 96, 12288, 128, 128, 36864, 128, 128, 16384, 128, 128, 36864, 160, 160, 20480, 128, 128, 36864, 192, 192, 24576, 128, 128, 36864, 224, 224, 28672, 128, 128, 36864, 256, 256, 32768, 128, 128, 16384, 128, 128, 36864, 160, 160, 20480, 128, 128, 36864, 192, 192, 24576, 128, 128, 36864, 224, 224, 28672, 128, 128, 36864, 256, 256, 32768, 128, 128, 36864, 288, 288, 36864, 128, 128, 36864, 320, 320, 40960, 128, 128, 36864, 352, 352, 45056, 128, 128, 36864, 384, 384, 49152, 128, 128, 36864, 416, 416, 53248, 128, 128, 36864, 448, 448, 57344, 128, 128, 36864, 480, 480, 61440, 128, 128, 36864, 512, 512, 131072, 256, 256, 32768, 128, 128, 36864, 288, 288, 36864, 128, 128, 36864, 320, 320, 40960, 128, 128, 36864, 352, 352, 45056, 128, 128, 36864, 384, 384, 49152, 128, 128, 36864, 416, 416, 53248, 128, 128, 36864, 448, 448, 57344, 128, 128, 36864, 480, 480, 61440, 128, 128, 36864, 512, 512, 65536, 128, 128, 36864, 544, 544, 69632, 128, 128, 36864, 576, 576, 73728, 128, 128, 36864, 608, 608, 77824, 128, 128, 36864, 640, 640, 81920, 128, 128, 36864, 672, 672, 86016, 128, 128, 36864, 704, 704, 90112, 128, 128, 36864, 736, 736, 94208, 128, 128, 36864, 768, 768, 98304, 128, 128, 36864, 800, 800, 102400, 128, 128, 36864, 832, 832, 106496, 128, 128, 36864, 864, 864, 110592, 128, 128, 36864, 896, 896, 114688, 128, 128, 36864, 928, 928, 118784, 128, 128, 36864, 960, 960, 122880, 128, 128, 36864, 992, 992, 126976, 128, 128, 36864, 1024, 1024, 524288, 512, 512, 65536, 128, 128, 36864, 544, 544, 69632, 128, 128, 36864, 576, 576, 73728, 128, 128, 36864, 608, 608, 77824, 128, 128, 36864, 640, 640, 81920, 128, 128, 36864, 672, 672, 86016, 128, 128, 36864, 704, 704, 90112, 128, 128, 36864, 736, 736, 94208, 128, 128, 36864, 768, 768, 98304, 128, 128, 36864, 800, 800, 102400, 128, 128, 36864, 832, 832, 106496, 128, 128, 36864, 864, 864, 110592, 128, 128, 36864, 896, 896, 114688, 128, 128, 36864, 928, 928, 118784, 128, 128, 36864, 960, 960, 122880, 128, 128, 36864, 992, 992, 126976, 128, 128, 36864, 1024, 1024, 7168, 7]}, {"name": "module", "id": 140507360639120, "class_name": "DenseNet121(\n  (densenet121): DenseNet(\n    (features): Sequential(\n      (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu0): ReLU(inplace=True)\n      (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (denseblock1): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (transition1): _Transition(\n        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock2): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (transition2): _Transition(\n        (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock3): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer13): _DenseLayer(\n          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer14): _DenseLayer(\n          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer15): _DenseLayer(\n          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer16): _DenseLayer(\n          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer17): _DenseLayer(\n          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer18): _DenseLayer(\n          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer19): _DenseLayer(\n          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer20): _DenseLayer(\n          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer21): _DenseLayer(\n          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer22): _DenseLayer(\n          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer23): _DenseLayer(\n          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer24): _DenseLayer(\n          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (transition3): _Transition(\n        (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      )\n      (denseblock4): _DenseBlock(\n        (denselayer1): _DenseLayer(\n          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer2): _DenseLayer(\n          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer3): _DenseLayer(\n          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer4): _DenseLayer(\n          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer5): _DenseLayer(\n          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer6): _DenseLayer(\n          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer7): _DenseLayer(\n          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer8): _DenseLayer(\n          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer9): _DenseLayer(\n          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer10): _DenseLayer(\n          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer11): _DenseLayer(\n          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer12): _DenseLayer(\n          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer13): _DenseLayer(\n          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer14): _DenseLayer(\n          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer15): _DenseLayer(\n          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n        (denselayer16): _DenseLayer(\n          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu1): ReLU(inplace=True)\n          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu2): ReLU(inplace=True)\n          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (drop_layer): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (classifier): Sequential(\n      (0): Linear(in_features=1024, out_features=7, bias=True)\n    )\n  )\n  (drop_layer): Dropout(p=0.2, inplace=False)\n)", "parameters": [["densenet121.features.conv0.weight", [64, 3, 7, 7]], ["densenet121.features.norm0.weight", [64]], ["densenet121.features.norm0.bias", [64]], ["densenet121.features.denseblock1.denselayer1.norm1.weight", [64]], ["densenet121.features.denseblock1.denselayer1.norm1.bias", [64]], ["densenet121.features.denseblock1.denselayer1.conv1.weight", [128, 64, 1, 1]], ["densenet121.features.denseblock1.denselayer1.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer1.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer1.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock1.denselayer2.norm1.weight", [96]], ["densenet121.features.denseblock1.denselayer2.norm1.bias", [96]], ["densenet121.features.denseblock1.denselayer2.conv1.weight", [128, 96, 1, 1]], ["densenet121.features.denseblock1.denselayer2.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer2.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer2.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock1.denselayer3.norm1.weight", [128]], ["densenet121.features.denseblock1.denselayer3.norm1.bias", [128]], ["densenet121.features.denseblock1.denselayer3.conv1.weight", [128, 128, 1, 1]], ["densenet121.features.denseblock1.denselayer3.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer3.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer3.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock1.denselayer4.norm1.weight", [160]], ["densenet121.features.denseblock1.denselayer4.norm1.bias", [160]], ["densenet121.features.denseblock1.denselayer4.conv1.weight", [128, 160, 1, 1]], ["densenet121.features.denseblock1.denselayer4.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer4.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer4.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock1.denselayer5.norm1.weight", [192]], ["densenet121.features.denseblock1.denselayer5.norm1.bias", [192]], ["densenet121.features.denseblock1.denselayer5.conv1.weight", [128, 192, 1, 1]], ["densenet121.features.denseblock1.denselayer5.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer5.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer5.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock1.denselayer6.norm1.weight", [224]], ["densenet121.features.denseblock1.denselayer6.norm1.bias", [224]], ["densenet121.features.denseblock1.denselayer6.conv1.weight", [128, 224, 1, 1]], ["densenet121.features.denseblock1.denselayer6.norm2.weight", [128]], ["densenet121.features.denseblock1.denselayer6.norm2.bias", [128]], ["densenet121.features.denseblock1.denselayer6.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.transition1.norm.weight", [256]], ["densenet121.features.transition1.norm.bias", [256]], ["densenet121.features.transition1.conv.weight", [128, 256, 1, 1]], ["densenet121.features.denseblock2.denselayer1.norm1.weight", [128]], ["densenet121.features.denseblock2.denselayer1.norm1.bias", [128]], ["densenet121.features.denseblock2.denselayer1.conv1.weight", [128, 128, 1, 1]], ["densenet121.features.denseblock2.denselayer1.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer1.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer1.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer2.norm1.weight", [160]], ["densenet121.features.denseblock2.denselayer2.norm1.bias", [160]], ["densenet121.features.denseblock2.denselayer2.conv1.weight", [128, 160, 1, 1]], ["densenet121.features.denseblock2.denselayer2.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer2.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer2.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer3.norm1.weight", [192]], ["densenet121.features.denseblock2.denselayer3.norm1.bias", [192]], ["densenet121.features.denseblock2.denselayer3.conv1.weight", [128, 192, 1, 1]], ["densenet121.features.denseblock2.denselayer3.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer3.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer3.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer4.norm1.weight", [224]], ["densenet121.features.denseblock2.denselayer4.norm1.bias", [224]], ["densenet121.features.denseblock2.denselayer4.conv1.weight", [128, 224, 1, 1]], ["densenet121.features.denseblock2.denselayer4.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer4.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer4.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer5.norm1.weight", [256]], ["densenet121.features.denseblock2.denselayer5.norm1.bias", [256]], ["densenet121.features.denseblock2.denselayer5.conv1.weight", [128, 256, 1, 1]], ["densenet121.features.denseblock2.denselayer5.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer5.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer5.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer6.norm1.weight", [288]], ["densenet121.features.denseblock2.denselayer6.norm1.bias", [288]], ["densenet121.features.denseblock2.denselayer6.conv1.weight", [128, 288, 1, 1]], ["densenet121.features.denseblock2.denselayer6.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer6.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer6.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer7.norm1.weight", [320]], ["densenet121.features.denseblock2.denselayer7.norm1.bias", [320]], ["densenet121.features.denseblock2.denselayer7.conv1.weight", [128, 320, 1, 1]], ["densenet121.features.denseblock2.denselayer7.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer7.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer7.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer8.norm1.weight", [352]], ["densenet121.features.denseblock2.denselayer8.norm1.bias", [352]], ["densenet121.features.denseblock2.denselayer8.conv1.weight", [128, 352, 1, 1]], ["densenet121.features.denseblock2.denselayer8.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer8.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer8.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer9.norm1.weight", [384]], ["densenet121.features.denseblock2.denselayer9.norm1.bias", [384]], ["densenet121.features.denseblock2.denselayer9.conv1.weight", [128, 384, 1, 1]], ["densenet121.features.denseblock2.denselayer9.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer9.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer9.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer10.norm1.weight", [416]], ["densenet121.features.denseblock2.denselayer10.norm1.bias", [416]], ["densenet121.features.denseblock2.denselayer10.conv1.weight", [128, 416, 1, 1]], ["densenet121.features.denseblock2.denselayer10.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer10.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer10.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer11.norm1.weight", [448]], ["densenet121.features.denseblock2.denselayer11.norm1.bias", [448]], ["densenet121.features.denseblock2.denselayer11.conv1.weight", [128, 448, 1, 1]], ["densenet121.features.denseblock2.denselayer11.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer11.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer11.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock2.denselayer12.norm1.weight", [480]], ["densenet121.features.denseblock2.denselayer12.norm1.bias", [480]], ["densenet121.features.denseblock2.denselayer12.conv1.weight", [128, 480, 1, 1]], ["densenet121.features.denseblock2.denselayer12.norm2.weight", [128]], ["densenet121.features.denseblock2.denselayer12.norm2.bias", [128]], ["densenet121.features.denseblock2.denselayer12.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.transition2.norm.weight", [512]], ["densenet121.features.transition2.norm.bias", [512]], ["densenet121.features.transition2.conv.weight", [256, 512, 1, 1]], ["densenet121.features.denseblock3.denselayer1.norm1.weight", [256]], ["densenet121.features.denseblock3.denselayer1.norm1.bias", [256]], ["densenet121.features.denseblock3.denselayer1.conv1.weight", [128, 256, 1, 1]], ["densenet121.features.denseblock3.denselayer1.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer1.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer1.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer2.norm1.weight", [288]], ["densenet121.features.denseblock3.denselayer2.norm1.bias", [288]], ["densenet121.features.denseblock3.denselayer2.conv1.weight", [128, 288, 1, 1]], ["densenet121.features.denseblock3.denselayer2.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer2.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer2.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer3.norm1.weight", [320]], ["densenet121.features.denseblock3.denselayer3.norm1.bias", [320]], ["densenet121.features.denseblock3.denselayer3.conv1.weight", [128, 320, 1, 1]], ["densenet121.features.denseblock3.denselayer3.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer3.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer3.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer4.norm1.weight", [352]], ["densenet121.features.denseblock3.denselayer4.norm1.bias", [352]], ["densenet121.features.denseblock3.denselayer4.conv1.weight", [128, 352, 1, 1]], ["densenet121.features.denseblock3.denselayer4.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer4.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer4.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer5.norm1.weight", [384]], ["densenet121.features.denseblock3.denselayer5.norm1.bias", [384]], ["densenet121.features.denseblock3.denselayer5.conv1.weight", [128, 384, 1, 1]], ["densenet121.features.denseblock3.denselayer5.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer5.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer5.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer6.norm1.weight", [416]], ["densenet121.features.denseblock3.denselayer6.norm1.bias", [416]], ["densenet121.features.denseblock3.denselayer6.conv1.weight", [128, 416, 1, 1]], ["densenet121.features.denseblock3.denselayer6.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer6.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer6.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer7.norm1.weight", [448]], ["densenet121.features.denseblock3.denselayer7.norm1.bias", [448]], ["densenet121.features.denseblock3.denselayer7.conv1.weight", [128, 448, 1, 1]], ["densenet121.features.denseblock3.denselayer7.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer7.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer7.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer8.norm1.weight", [480]], ["densenet121.features.denseblock3.denselayer8.norm1.bias", [480]], ["densenet121.features.denseblock3.denselayer8.conv1.weight", [128, 480, 1, 1]], ["densenet121.features.denseblock3.denselayer8.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer8.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer8.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer9.norm1.weight", [512]], ["densenet121.features.denseblock3.denselayer9.norm1.bias", [512]], ["densenet121.features.denseblock3.denselayer9.conv1.weight", [128, 512, 1, 1]], ["densenet121.features.denseblock3.denselayer9.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer9.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer9.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer10.norm1.weight", [544]], ["densenet121.features.denseblock3.denselayer10.norm1.bias", [544]], ["densenet121.features.denseblock3.denselayer10.conv1.weight", [128, 544, 1, 1]], ["densenet121.features.denseblock3.denselayer10.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer10.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer10.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer11.norm1.weight", [576]], ["densenet121.features.denseblock3.denselayer11.norm1.bias", [576]], ["densenet121.features.denseblock3.denselayer11.conv1.weight", [128, 576, 1, 1]], ["densenet121.features.denseblock3.denselayer11.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer11.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer11.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer12.norm1.weight", [608]], ["densenet121.features.denseblock3.denselayer12.norm1.bias", [608]], ["densenet121.features.denseblock3.denselayer12.conv1.weight", [128, 608, 1, 1]], ["densenet121.features.denseblock3.denselayer12.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer12.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer12.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer13.norm1.weight", [640]], ["densenet121.features.denseblock3.denselayer13.norm1.bias", [640]], ["densenet121.features.denseblock3.denselayer13.conv1.weight", [128, 640, 1, 1]], ["densenet121.features.denseblock3.denselayer13.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer13.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer13.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer14.norm1.weight", [672]], ["densenet121.features.denseblock3.denselayer14.norm1.bias", [672]], ["densenet121.features.denseblock3.denselayer14.conv1.weight", [128, 672, 1, 1]], ["densenet121.features.denseblock3.denselayer14.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer14.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer14.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer15.norm1.weight", [704]], ["densenet121.features.denseblock3.denselayer15.norm1.bias", [704]], ["densenet121.features.denseblock3.denselayer15.conv1.weight", [128, 704, 1, 1]], ["densenet121.features.denseblock3.denselayer15.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer15.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer15.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer16.norm1.weight", [736]], ["densenet121.features.denseblock3.denselayer16.norm1.bias", [736]], ["densenet121.features.denseblock3.denselayer16.conv1.weight", [128, 736, 1, 1]], ["densenet121.features.denseblock3.denselayer16.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer16.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer16.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer17.norm1.weight", [768]], ["densenet121.features.denseblock3.denselayer17.norm1.bias", [768]], ["densenet121.features.denseblock3.denselayer17.conv1.weight", [128, 768, 1, 1]], ["densenet121.features.denseblock3.denselayer17.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer17.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer17.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer18.norm1.weight", [800]], ["densenet121.features.denseblock3.denselayer18.norm1.bias", [800]], ["densenet121.features.denseblock3.denselayer18.conv1.weight", [128, 800, 1, 1]], ["densenet121.features.denseblock3.denselayer18.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer18.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer18.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer19.norm1.weight", [832]], ["densenet121.features.denseblock3.denselayer19.norm1.bias", [832]], ["densenet121.features.denseblock3.denselayer19.conv1.weight", [128, 832, 1, 1]], ["densenet121.features.denseblock3.denselayer19.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer19.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer19.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer20.norm1.weight", [864]], ["densenet121.features.denseblock3.denselayer20.norm1.bias", [864]], ["densenet121.features.denseblock3.denselayer20.conv1.weight", [128, 864, 1, 1]], ["densenet121.features.denseblock3.denselayer20.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer20.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer20.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer21.norm1.weight", [896]], ["densenet121.features.denseblock3.denselayer21.norm1.bias", [896]], ["densenet121.features.denseblock3.denselayer21.conv1.weight", [128, 896, 1, 1]], ["densenet121.features.denseblock3.denselayer21.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer21.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer21.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer22.norm1.weight", [928]], ["densenet121.features.denseblock3.denselayer22.norm1.bias", [928]], ["densenet121.features.denseblock3.denselayer22.conv1.weight", [128, 928, 1, 1]], ["densenet121.features.denseblock3.denselayer22.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer22.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer22.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer23.norm1.weight", [960]], ["densenet121.features.denseblock3.denselayer23.norm1.bias", [960]], ["densenet121.features.denseblock3.denselayer23.conv1.weight", [128, 960, 1, 1]], ["densenet121.features.denseblock3.denselayer23.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer23.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer23.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock3.denselayer24.norm1.weight", [992]], ["densenet121.features.denseblock3.denselayer24.norm1.bias", [992]], ["densenet121.features.denseblock3.denselayer24.conv1.weight", [128, 992, 1, 1]], ["densenet121.features.denseblock3.denselayer24.norm2.weight", [128]], ["densenet121.features.denseblock3.denselayer24.norm2.bias", [128]], ["densenet121.features.denseblock3.denselayer24.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.transition3.norm.weight", [1024]], ["densenet121.features.transition3.norm.bias", [1024]], ["densenet121.features.transition3.conv.weight", [512, 1024, 1, 1]], ["densenet121.features.denseblock4.denselayer1.norm1.weight", [512]], ["densenet121.features.denseblock4.denselayer1.norm1.bias", [512]], ["densenet121.features.denseblock4.denselayer1.conv1.weight", [128, 512, 1, 1]], ["densenet121.features.denseblock4.denselayer1.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer1.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer1.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer2.norm1.weight", [544]], ["densenet121.features.denseblock4.denselayer2.norm1.bias", [544]], ["densenet121.features.denseblock4.denselayer2.conv1.weight", [128, 544, 1, 1]], ["densenet121.features.denseblock4.denselayer2.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer2.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer2.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer3.norm1.weight", [576]], ["densenet121.features.denseblock4.denselayer3.norm1.bias", [576]], ["densenet121.features.denseblock4.denselayer3.conv1.weight", [128, 576, 1, 1]], ["densenet121.features.denseblock4.denselayer3.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer3.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer3.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer4.norm1.weight", [608]], ["densenet121.features.denseblock4.denselayer4.norm1.bias", [608]], ["densenet121.features.denseblock4.denselayer4.conv1.weight", [128, 608, 1, 1]], ["densenet121.features.denseblock4.denselayer4.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer4.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer4.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer5.norm1.weight", [640]], ["densenet121.features.denseblock4.denselayer5.norm1.bias", [640]], ["densenet121.features.denseblock4.denselayer5.conv1.weight", [128, 640, 1, 1]], ["densenet121.features.denseblock4.denselayer5.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer5.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer5.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer6.norm1.weight", [672]], ["densenet121.features.denseblock4.denselayer6.norm1.bias", [672]], ["densenet121.features.denseblock4.denselayer6.conv1.weight", [128, 672, 1, 1]], ["densenet121.features.denseblock4.denselayer6.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer6.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer6.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer7.norm1.weight", [704]], ["densenet121.features.denseblock4.denselayer7.norm1.bias", [704]], ["densenet121.features.denseblock4.denselayer7.conv1.weight", [128, 704, 1, 1]], ["densenet121.features.denseblock4.denselayer7.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer7.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer7.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer8.norm1.weight", [736]], ["densenet121.features.denseblock4.denselayer8.norm1.bias", [736]], ["densenet121.features.denseblock4.denselayer8.conv1.weight", [128, 736, 1, 1]], ["densenet121.features.denseblock4.denselayer8.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer8.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer8.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer9.norm1.weight", [768]], ["densenet121.features.denseblock4.denselayer9.norm1.bias", [768]], ["densenet121.features.denseblock4.denselayer9.conv1.weight", [128, 768, 1, 1]], ["densenet121.features.denseblock4.denselayer9.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer9.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer9.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer10.norm1.weight", [800]], ["densenet121.features.denseblock4.denselayer10.norm1.bias", [800]], ["densenet121.features.denseblock4.denselayer10.conv1.weight", [128, 800, 1, 1]], ["densenet121.features.denseblock4.denselayer10.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer10.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer10.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer11.norm1.weight", [832]], ["densenet121.features.denseblock4.denselayer11.norm1.bias", [832]], ["densenet121.features.denseblock4.denselayer11.conv1.weight", [128, 832, 1, 1]], ["densenet121.features.denseblock4.denselayer11.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer11.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer11.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer12.norm1.weight", [864]], ["densenet121.features.denseblock4.denselayer12.norm1.bias", [864]], ["densenet121.features.denseblock4.denselayer12.conv1.weight", [128, 864, 1, 1]], ["densenet121.features.denseblock4.denselayer12.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer12.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer12.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer13.norm1.weight", [896]], ["densenet121.features.denseblock4.denselayer13.norm1.bias", [896]], ["densenet121.features.denseblock4.denselayer13.conv1.weight", [128, 896, 1, 1]], ["densenet121.features.denseblock4.denselayer13.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer13.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer13.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer14.norm1.weight", [928]], ["densenet121.features.denseblock4.denselayer14.norm1.bias", [928]], ["densenet121.features.denseblock4.denselayer14.conv1.weight", [128, 928, 1, 1]], ["densenet121.features.denseblock4.denselayer14.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer14.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer14.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer15.norm1.weight", [960]], ["densenet121.features.denseblock4.denselayer15.norm1.bias", [960]], ["densenet121.features.denseblock4.denselayer15.conv1.weight", [128, 960, 1, 1]], ["densenet121.features.denseblock4.denselayer15.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer15.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer15.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.denseblock4.denselayer16.norm1.weight", [992]], ["densenet121.features.denseblock4.denselayer16.norm1.bias", [992]], ["densenet121.features.denseblock4.denselayer16.conv1.weight", [128, 992, 1, 1]], ["densenet121.features.denseblock4.denselayer16.norm2.weight", [128]], ["densenet121.features.denseblock4.denselayer16.norm2.bias", [128]], ["densenet121.features.denseblock4.denselayer16.conv2.weight", [32, 128, 3, 3]], ["densenet121.features.norm5.weight", [1024]], ["densenet121.features.norm5.bias", [1024]], ["densenet121.classifier.0.weight", [7, 1024]], ["densenet121.classifier.0.bias", [7]]], "output_shape": [[16, 1024], [16, 7]], "num_parameters": [9408, 64, 64, 64, 64, 8192, 128, 128, 36864, 96, 96, 12288, 128, 128, 36864, 128, 128, 16384, 128, 128, 36864, 160, 160, 20480, 128, 128, 36864, 192, 192, 24576, 128, 128, 36864, 224, 224, 28672, 128, 128, 36864, 256, 256, 32768, 128, 128, 16384, 128, 128, 36864, 160, 160, 20480, 128, 128, 36864, 192, 192, 24576, 128, 128, 36864, 224, 224, 28672, 128, 128, 36864, 256, 256, 32768, 128, 128, 36864, 288, 288, 36864, 128, 128, 36864, 320, 320, 40960, 128, 128, 36864, 352, 352, 45056, 128, 128, 36864, 384, 384, 49152, 128, 128, 36864, 416, 416, 53248, 128, 128, 36864, 448, 448, 57344, 128, 128, 36864, 480, 480, 61440, 128, 128, 36864, 512, 512, 131072, 256, 256, 32768, 128, 128, 36864, 288, 288, 36864, 128, 128, 36864, 320, 320, 40960, 128, 128, 36864, 352, 352, 45056, 128, 128, 36864, 384, 384, 49152, 128, 128, 36864, 416, 416, 53248, 128, 128, 36864, 448, 448, 57344, 128, 128, 36864, 480, 480, 61440, 128, 128, 36864, 512, 512, 65536, 128, 128, 36864, 544, 544, 69632, 128, 128, 36864, 576, 576, 73728, 128, 128, 36864, 608, 608, 77824, 128, 128, 36864, 640, 640, 81920, 128, 128, 36864, 672, 672, 86016, 128, 128, 36864, 704, 704, 90112, 128, 128, 36864, 736, 736, 94208, 128, 128, 36864, 768, 768, 98304, 128, 128, 36864, 800, 800, 102400, 128, 128, 36864, 832, 832, 106496, 128, 128, 36864, 864, 864, 110592, 128, 128, 36864, 896, 896, 114688, 128, 128, 36864, 928, 928, 118784, 128, 128, 36864, 960, 960, 122880, 128, 128, 36864, 992, 992, 126976, 128, 128, 36864, 1024, 1024, 524288, 512, 512, 65536, 128, 128, 36864, 544, 544, 69632, 128, 128, 36864, 576, 576, 73728, 128, 128, 36864, 608, 608, 77824, 128, 128, 36864, 640, 640, 81920, 128, 128, 36864, 672, 672, 86016, 128, 128, 36864, 704, 704, 90112, 128, 128, 36864, 736, 736, 94208, 128, 128, 36864, 768, 768, 98304, 128, 128, 36864, 800, 800, 102400, 128, 128, 36864, 832, 832, 106496, 128, 128, 36864, 864, 864, 110592, 128, 128, 36864, 896, 896, 114688, 128, 128, 36864, 928, 928, 118784, 128, 128, 36864, 960, 960, 122880, 128, 128, 36864, 992, 992, 126976, 128, 128, 36864, 1024, 1024, 7168, 7]}], "edges": []}